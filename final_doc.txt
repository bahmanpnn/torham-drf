#1 config e proje
#darbare drf chist o ina sohbat mishe
#yek proje django run mikonim o rest ro set mikonim dar porje

------------------------------------------------------------------------

#2serializer chist
#serializer be mani e tabdile data e az database be json ya bar axesh baraye ertebat ba baghie system ha
#avalash ipython ro install mikonim va vaghti ke shell ro run konim khodesh auto az ioython estefade mikone dar in mohit
#badesh ham yek mesale koochik darbare serializer ha mide ke serializer ha be soorate koli 3 ta hastand==>
1.serializer
2.modelSerializer
3.hyperlinkedserializer

1--------------  serializers.serializer
 
#in model serializer mese set kardane field haye model ha dar django hast==>

class CommentSerializer(serializers.Serializer):
    email = serializers.EmailField()
    content = serializers.CharField(max_length=200)
    created = serializers.DateTimeField()

--object model
class Comment(object):
    def __int__(self, email, content, created):
        self.email = email
        self.content = content
        self.created = created or datetime.now()

--create object
comment=Comment(email='test@test.com',content='test')
serializer_data=CommentSerializer(comment)
serializer_data.comment ro ke bezani data ro be soorate json mibini

2----------- serializers.ModelSerializer
#model serializer mesle hamoon modelform hast ke be komake class e meta mitoonim model ro mostaghim be serializer vasl konim va vase vaghti ke nemikhaym kheyli customize konim field haye serializer ro in ravesh soratemoon ro bishtar mikone ==>

--model
class UserProfile(models.Model):
    name = models.CharField(max_length=150)
    age = models.PositiveIntegerField(max_length=150)
    bio = models.TextField()
    email = models.EmailField()

    def __str__(self):
        return self.name

--serializer
class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = '__all__'
---views ***
#baraye shorou ke data e json doros konim ya daryaft konim az user,az function ha estefade mikonim ke be komake decorator mitoonim baraye drf o rest estefade konimeshoon==>

from rest_framework.decorators import api_view
from rest_framework.response import Response
-
@api_view(['GET', 'POST'])
def user_profile(request):
    profiles = UserProfile.objects.all()
    serializer_data = UserProfileSerializer(profiles, many=True)
    return Response(serializer_data.data)
--
#tamrin akhare jalase ine ke class comment ee ke ebtedaye jalase barresi kardim ro dar file haye serializer o model estefade konim

------------------------------------------------------------------------

#3 more about methods function
#darbare method haye function api ha bishtar tozih dade mishe ke ma khoob nist baraye har method e yek endpoint o url chand function benevisim(vase get yeki vase post yeki) albate mishe inkaro kard va ba viewset ha tarkib kard.
#hamchenin behtare ke age kare mohemi dare in api_view behtare ke vase har method esh yek serializer e joda neveshte beshe ta secure bemoone va hame data haye oon endpoint o modelesh neshoon dade nashe==>

class CreateUserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = ('name', 'bio', 'email', 'age')

--view

@api_view(['GET', 'POST'])
def user_profile(request):
    if request.method == 'GET':
        profiles = UserProfile.objects.all()
        serializer_data = UserProfileSerializer(profiles, many=True)
        return Response(serializer_data.data)
    if request.method == 'POST':
        req_data = request.data
        serializer = CreateUserProfileSerializer(data=req_data)
        # we don't want to fill instance and return ir like get method,we want to fill data with this serializer

        if serializer.is_valid():  # return boolean
            serializer.save()
            return Response(serializer.data,status=201)
        else:
            return Response(serializer.errors, status=400)  # return dictionary of errors

---nokte
ghesmate if o else ro khode serializer handle mikone va niaz nist ke ma shart bezarim age valid bood save kon age na response ina return kone khodesh mitoone by default inkaro bokone magar inke bekhaym test konim yek seri time ha oon moghe shart mizarim ta befahmim moshkel chie==>

@api_view(['GET', 'POST'])
def user_profile(request):
    ...

    if request.method == 'POST':
        req_data = request.data
        serializer = CreateUserProfileSerializer(data=req_data)
        # we don't want to fill instance and return ir like get method,we want to fill data with this serializer

        serializer.is_valid(raise_exception=True)  # raise_exception means that if errors exists return them!!
        serializer.save()
        return Response(serializer.data, status=201)

#dar kol function base view ha baraye karhaye saade hast va age niaz be class nist bayad az ina estefade kard ke kheyli kam pish miad ba function api_view benevisim

------------------------------------------------------------------------

#4 more about method in functions(update and delete) /class based views
#mehtod haye update o delete ham set mikonim in jalase va kheyli maloome niaz be tozih nis==>

@api_view(['GET', 'PUT', 'DELETE'])
def update_delete_user_profile(request, pk):
    if request.method == 'GET':
        profile = UserProfile.objects.get(pk=pk)
        if profile is not None:
            serializer_data = UserProfileSerializer(profile)
            return Response(serializer_data.data)
        else:
            return Response(status=status.HTTP_404_NOT_FOUND)
    if request.method == 'PUT':
        user_profile_pk = UserProfile.objects.get(pk=pk)
        if user_profile_pk is not None:
            serializer = UserProfileSerializer(
                instance=user_profile_pk,
                data=request.data
            )
            serializer.is_valid(raise_exception=True)
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'DELETE':
        user_profile_pk = UserProfile.objects.get(pk=pk)
        user_profile_pk.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

----nokte ***
#faghat yek moshkeli ke hast ine ke masalan 7ta user vojood dare vali age url e bade oon ham request bezani miare vasat.vase hamin get ro ham add kardam be in endpoint va age nadashte bashe method e get ro miare gui e drf va in bade.vase hamin ya bayad shart bezari age pk vojood nadasht yekari bokone masalan 404 raise konim ya response error return konim!!

------------CBVs 
#class base view ha saade tarin esh ke customizing e ziadi dare mesle hamoon cbv haye khode django hast ke bejaye ersbari az View az APIView estefade mikonim==>

class UserProfileView(APIView):
    def get(self, request):
        profiles = UserProfile.objects.all()

        serializer_data = UserProfileSerializer(profiles, many=True)
        return Response(serializer_data.data)

    def post(self, request):
        serializer = CreateUserProfileSerializer(data=request.data)
        # we don't want to fill instance and return ir like get method,we want to fill data with this serializer
        serializer.is_valid(raise_exception=True)  # raise_exception means that if errors exists return them!!
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    def put(self, request, pk):
        user_profile_pk = UserProfile.objects.get(pk=pk)
        if user_profile_pk is not None:
            serializer = UserProfileSerializer(
                instance=user_profile_pk,
                data=request.data
            )
            serializer.is_valid(raise_exception=True)
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(status=status.HTTP_404_NOT_FOUND)

    def delete(self, request, pk):
        user_profile_pk = UserProfile.objects.get(pk=pk)
        user_profile_pk.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

--nokte **
#dar function ha chon joda boodan method ha url ha ok bood vali dar cbv ha age APIView estefade mikonim bayad url haro joda konim va chandta url ke lazem darim(bastegi be voroodi haye method hamoon ham dare) bayad oon class ro set konim ke dar inja 2ta url set mishe.yeki baraye get o post ke id o pk lazem nadare dovomin url ham vase update o delete hast ke pk migire va profile ro get mikone az database

--urls
    path('users/', UserProfileView.as_view(), name='user-profile-class-base-view-get-post'),
    path('users/<int:pk>/', UserProfileView.as_view(), name='user-profile-class-base-view-update-and-delete'),

---nokte 2
#age http://127.0.0.1:8000/users/5/ ro vared konim ba inke dar database id e 5 vojood dare error migirim dar browser vali age dar postman ya rest client haye dg test konim put va delete ro anjam mishe va error nemikhore!!!

---------------------------------------------------------------------------------------------

#5 generic views
#generic ha yek seri class haye khaas hastand ke vase ma yek seri karhaye khas anjam midan
#dar jalase ghabl yek APIView neveshtim ke kolli code bayad mizadim ta yek method ro set konim hala dar rstframework class ee vojood dare be esme ListAPIView ke kare maro sade tar mikone dar method e get ke list oon query va modeli ee ke mikhaym ro neshoon mide==>

class ListUserProfileView(ListAPIView):
    queryset = UserProfile.objects.all()
    serializer_class = UserProfileSerializer
    # permission_classes = ...
    # pagination_class = ...


class CreateUserProfileView(CreateAPIView):
    queryset = UserProfile.objects.all()
    serializer_class = CreateUserProfileSerializer
    # permission_classes = ...
    # pagination_class = ...


class ListCreateUserProfileView(ListCreateAPIView):
    queryset = UserProfile.objects.all()
    serializer_class = CreateUserProfileSerializer
    # permission_classes = (IsAuthenticated,)
    # pagination_class = ...

---------------------------------------------------------------------------------------------

#6












